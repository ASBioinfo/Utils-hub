* Interleave data using longranger basic
longranger basic --id=LGP05  --fastqs=/home/livestock/supernova_inputdata

* GapCloser

--LGP05.config--
# maximal read length
max_rd_len=127

[LIB]
# average insert size
avg_ins=500

# if sequence needs to be
reversed reverse_seq=0

# in which part(s) the reads are used
asm_flags=4

# use only first 50 bps of each read
rd_len_cutoff=127

# in which order the reads are used while scaffolding
rank=1

# cutoff of pair number for a reliable connection (default 3)
pair_num_cutoff=3

# minimum aligned length to contigs for a reliable read location (default 32)
map_len=32

# fastq file for read 1
q1=/home/livestock/gap_closer/LGP_05/barcode_trimmed_data/LGP05_S1_L001_R1_001_trim.fastq.gz

# fastq file for read 2 always follows fastq file for read 1
q2=/home/livestock/gap_closer/LGP_05/barcode_trimmed_data/LGP05_S1_L001_R1_001_trim.fastq.gz

------
GapCloser -a LGP05_arcs.fa -b LGP05.config -l 127 -t 80 -o LGP05_arcs_gapc.fa


* To filter the SAM file after unmapped data alignement on NUI
samtools view -@ 40 -h -F12 final_nui_mappedAligned.out.sam -o final_filterd.sam
awk '!/^@/{if ($5==255) print $0}' final_filterd.sam|awk '{print "#"$(NF-1)"\t"$0}'|awk -F "#AS:i:" '{print $2}'|awk '{if ($1>=140) print $0}'|cut -f2- >filtered_sam_file
awk '/^@/{print $0}' final_filterd.sam >header.txt
cat header.txt filtered_sam_file >filtered_sam_file.sam

* To run Augustus
augustus --species=human --singlestrand=true --genemodel=partial nui_final_set.fa >nui_final_set_partial
augustus --gff3=on --singlestrand=true --genemodel=complete cd_hit_out_contig_name_changed.fa --species=human > cd_hit_out_contig_name_changed.gff (For GFF)

* To run pCA on genotyping NUi on large dataset on matrix of 0/1
library("FactoMineR")
library("factoextra")
expressiondata = read.csv("final_nui_genotyped_filtered.csv",sep = ",")
expression = as.data.frame(expressiondata[, -c(1)])
expression = t(expression)
colnames(expression) = expressiondata$nui
check1<-read.table("sample_breed_only",header=T)
final <-cbind(expression,check1)
        
check.pca<-PCA(final[,-2317], graph = FALSE)
fviz_pca_ind(check_pca,geom.ind = "point",col.ind = final$breed,palette = c("#00AFBB", "#E7B800", "#FC4E07","#6a5acd","#3cb371"),addEllipses = TRUE,legend.title = "Groups")

* N removal in fasta sequence
perl ../N100_percent_removal.pl LGP04_supernova.fa > LGP04_supernova_N.fa       ##Contig with 100% N was removed
perl ../N_start_end_removal.pl LGP04_supernova_N.fa >NIAB_Sahiwal_supernova.fa  ##Removed start and end N's

* arcs command
arcs-make arks draft=LGP04_supernova_N reads=LGP_04 k=60 m=50-10000 t=85

if barcodeMultiplicityArcs.tsv is available then run following command
arcs-make arks draft=LGP04_supernova_N reads=LGP_04 k=60 m=50-10000 t=85  barcode-counts=barcodeMultiplicityArcs.tsv (if before previous command was runned)

* blast filter

Filter criteria:
blastp 80% identity 50% qry_cov 1e-6 evalue
blastx 80% identity 1e-6 evalue   , (No query coverage filter)
tblastn 80% identity 1e-6 evalue

*blast command

blastx -query stringtie_transcripts_2.fa -db /home/niab/NR_db/chordata_NR.fasta -outfmt "7 qseqid sseqid evalue bitscore pident length salltitles qstart qend qlen sstart send slen nident mismatch gapopen gaps qcovs qcovhsp" -evalue 1e-6 -max_target_seqs 1 -max_hsps 1 -num_threads 15 -out stringtie_qry2_chordata_NR_db
blastp -query augustus_protein_id_change.faa -db /home/niab/NR_db/chordata_NR.fasta -outfmt "7 qseqid sseqid evalue bitscore pident length salltitles qstart qend qlen sstart send slen nident mismatch gapopen gaps qcovs qcovhsp" -evalue 1e-6 -max_target_seqs 1 -max_hsps 1 -num_threads 10 -out augustus_qry_chordata_NR_db

* protein nmae to linked publication
for i in `cat acc`; do printf ${i}"\t"; esearch -db protein -query ${i} | elink -target gene | esummary | xtract -pattern DocumentSummary -element Name,Id; done

* cd-hit
cd-hit-est -i bovidae_protein.faa -o bovidae_protein_CD_hit.fa -T 50 -aS 0.9 -g 1 -c 0.9 -M 0   (Nucleotide/DNA)
cd-hit -i bovidae_protein.faa -o bovidae_protein_CD_hit.fa -T 50 -aS 0.9 -g 1 -c 0.9 -M 0   (protein)
-- aS depends accordingley

* To filter best hit after stringent filtering
STRG.3.1        XP_042091022.1  8.95e-24        73.9    88.235  34      XP_042091022.1 elongation factor G, mitochondrial isoform X2 [Ovis aries]       107     6       274	600     633     644     30      4       0       0       82      12
python blast_filter_top_hit.py

* Repeatmasker
RepeatMasker -nolow -species cow -xsmall cd_hit_out_contig_name_changed.fa  > repeatmasker.log

* STAR aligning and filtering to get unmapped transcript
- Indexing
STAR --runMode genomeGenerate --runThreadN 32 --genomeDir ./STAR_index --genomeFastaFiles ./cd_hit_out_contig_name_changed.fa --genomeSAindexNbases 9 â€“sjdbOverhang 100
- Aligning
STAR --runThreadN 32 --genomeDir ./STAR_index --outFileNamePrefix ./supercontig --readFilesIn unmapped_2ndUnmapped.out.mate1  unmapped_2ndUnmapped.out.mate2

- To filter the SAM file after unmapped data alignement on NUI.
samtools view -@ 40 -h -F12 supercontigAligned.out.sam -o final_filterd.sam
awk '!/^@/{if ($5==255) print $0}' final_filterd.sam|awk '{print "#"$(NF-1)"\t"$0}'|awk -F "#AS:i:" '{print $2}'|awk '{if ($1>=140) print $0}'|cut -f2- >filtered_sam_file
awk '/^@/{print $0}' final_filterd.sam|less
awk '/^@/{print $0}' final_filterd.sam >header.txt
cat header.txt filtered_sam_file >filtered_sam_file.sam
samtools sort -O BAM -@ 60 -o filtered_sam_file_sort.bam filtered_sam_file.sam
stringtie -p 12 -o supercontig.gtf filtered_sam_file_sort.bam

* Genotyping of sample
- Run seprately for all sample
bwa mem -t 24 /home/niab/naveen/cattle_analysis/masurca_popins/cd_hit/index/final_CD_hit.fa /home/niab/naveen/cattle_analysis/masurca_popins/11_S13/final_contig.fa|samtools sort -@ 10 -o 11_S13.bam
/home/niab/app/samtools-1.17/samtools consensus -aa -m simple -@ 10 -f PILEUP 11_S13.bam > 11_S13.cns
perl nui_genotype_sample.pl cd_hit_out_contig_name_changed.fa 11_S13.cns > 11_S13.geno
- make a geno list using 
ls./*.geno > geno_list
perl nui_genotype.pl geno_list > bwa-mem.matrix

* Running of popins
-Run sample wise
/home/niab/app/PopIns2/popins2 contigmap -t 90 11_S13
/home/niab/app/PopIns2/popins2 place-splitalign 11_S13
/home/niab/app/PopIns2/popins2 genotype 11_S13

* assembley to Syri
------Ragtag for assembly correction/mismatch of scaffold---------(same for all assemblies) 

ragtag.py scaffold ../GCF_003369695.1_UOA_Brahman_1_genomic.fna ../LGP01_2_assembly_sequence.fasta

------BUSCO analysis to check completeness of assemblies--------(same for all assemblies)
*Here lineages database downloaded and path was given 

busco -i LGP01_2_ragtag_scaffold.fasta -l /home/sarwar/abhisek/busco/busco_downloads/lineages/mammalia_odb10/ -o out_busco --out_path /home/sarwar/abhisek/ragtag/busco_out/out_busco_1 -m geno -c 30
busco -i LGP02_ragtag.fasta -l /home/niab/app/busco/downloads/mammalia_odb10/ -o LGP02_out_busco -m genome -c 80 --offline

-------BUSCO plot generation---------------
Place all BUSCO output file i.e(short_summary.specific.mammalia_odb10.LGP02_Kankrej.txt) in a single directory of all assembly files and run below command
python /home/sarwar/app/busco/scripts/generate_plot.py -wd ./

------Remove scaffolds other than chromosome---------(same for all assemblies)

perl ../merge_scaffolds_to_contig.pl LGP01_2_ragtag_scaffold.fasta |awk '/^>NC_040106.1/{print NR}' -
perl ../merge_scaffolds_to_contig.pl LGP01_2_ragtag_scaffold.fasta |awk '{if(NR<61)print $0}' - >LGP01_2_ragtag_chr.fasta

------RepeatMasker used for masking---------------(same for all assemblies)
RepeatMasker -pa 38 -q -species cow LGP01_2_ragtag_chr.fasta

------nucmer for alignment-----------------------(same for all assemblies)
nucmer --maxmatch -c 500 -b 500 -l 100 -t 60 /home/niab/abhisek/syri/ref/reference_chr.fna.masked /home/niab/abhisek/syri/LGP01_2/LGP01_2_ragtag_chr.fasta.masked

------mummer for delta filtering-----------------(same for all assemblies)
delta-filter -m -i 90 -l 100 out.delta > out_m_i90_l100.delta

-------mummer for getting coordinates------------(same for all assemblies)
show-coords -THrd out_m_i90_l100.delta > out_m_i90_l100.coords

-------Running syri-----------------------------(Choose ref & query  assemblies in correct order for  plot generation)
syri -c out_m_i90_l100.coords -r /home/niab/abhisek/syri/ref/reference_chr.fna.masked -q /home/niab/abhisek/syri/LGP01_2/LGP01_2_ragtag_chr.fasta.masked -d out_m_i90_l100.delta --nc 60 --prefix ref_LGP01_2 --all

-------Running plotsr for syri plot generation----(For all assemblies in a single plot)
link all assemblies fasta file in a single directories
put all syri.out files in the same folder
Make a genomes.txt file with a specific format that provided in website
then run below command

plotsr --sr ref_LGP01_2syri.out --sr LGP01_2_LGP02syri.out --sr LGP02_LGP03syri.out --sr LGP03_LGP04syri.out --sr LGP04_LGP05syri.out --genomes genomes.txt -H 40 -W 50 -o plot.png

* recode VCF

bcftools view vcf_filtered_maf_05.recode.vcf.gz NC_040076.1 > popgenome/NC_040076.1

* Filter vcf tools

vcftools --vcf sp058_DNA.vcf --remove-indels --minQ 40 --recode --recode-INFO-all --out sp058_DNA_q40_SNP_only.vcf



